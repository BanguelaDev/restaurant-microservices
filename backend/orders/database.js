/**
 * üóÑÔ∏è CONEX√ÉO COM BANCO DE DADOS MYSQL - SERVI√áO DE PEDIDOS
 * 
 * Este arquivo gerencia toda a comunica√ß√£o com o banco de dados MySQL:
 * - Cria√ß√£o e gerenciamento do pool de conex√µes
 * - Execu√ß√£o de queries SQL
 * - Verifica√ß√£o de status da conex√£o
 * - Tratamento de erros de banco
 * 
 * TECNOLOGIAS UTILIZADAS:
 * - mysql2/promise: Driver MySQL com suporte a Promises/async-await
 * - Pool de conex√µes: Para gerenciar m√∫ltiplas conex√µes simult√¢neas
 * - Configura√ß√£o via arquivo config.js
 * 
 * ARQUITETURA:
 * - Pool de conex√µes para melhor performance
 * - Conex√µes autom√°ticas com retry
 * - Verifica√ß√£o de sa√∫de da conex√£o
 * - Tratamento de erros centralizado
 * 
 * BENEF√çCIOS DO POOL:
 * - Reutiliza√ß√£o de conex√µes
 * - Melhor performance
 * - Controle de concorr√™ncia
 * - Gerenciamento autom√°tico de conex√µes
 */

// Importar depend√™ncias
const mysql = require('mysql2/promise');      // Driver MySQL com suporte a Promises
const config = require('./config');           // Configura√ß√µes do banco (host, user, password, etc.)

// Vari√°vel global para armazenar o pool de conex√µes
let pool = null;

// ============================================================================
// üîå CRIA√á√ÉO DO POOL DE CONEX√ïES
// ============================================================================

/**
 * Fun√ß√£o para criar e configurar o pool de conex√µes MySQL
 * 
 * FUNCIONAMENTO:
 * 1. Cria pool usando configura√ß√µes do arquivo config.js
 * 2. Testa a conex√£o para verificar se est√° funcionando
 * 3. Loga sucesso ou erro da conex√£o
 * 4. Retorna o pool criado ou null em caso de erro
 * 
 * CONFIGURA√á√ïES DO POOL:
 * - waitForConnections: true (aguarda conex√µes dispon√≠veis)
 * - connectionLimit: 10 (m√°ximo de conex√µes simult√¢neas)
 * - queueLimit: 0 (sem limite na fila de espera)
 * 
 * RETORNO:
 * - Pool de conex√µes se sucesso
 * - null se falhar na conex√£o
 */
const createPool = async () => {
  try {
    // Criar pool usando configura√ß√µes do config.js
    pool = mysql.createPool(config);
    
    // Testar conex√£o obtendo uma conex√£o do pool
    const connection = await pool.getConnection();
    console.log('‚úÖ MySQL conectado com sucesso');
    
    // Liberar conex√£o de teste de volta para o pool
    connection.release();
    
    return pool;
  } catch (error) {
    // Logar erro mas n√£o parar o servi√ßo
    console.log('‚ùå Erro ao conectar com MySQL:', error.message);
    return null;
  }
};

// ============================================================================
// üöÄ EXECU√á√ÉO DE QUERIES
// ============================================================================

/**
 * Fun√ß√£o para executar queries SQL no banco de dados
 * 
 * FUNCIONAMENTO:
 * 1. Verifica se o pool de conex√µes est√° dispon√≠vel
 * 2. Executa a query usando mysql2/promise
 * 3. Retorna apenas as linhas (rows) do resultado
 * 4. Trata erros e loga para debugging
 * 
 * PAR√ÇMETROS:
 * - query: String SQL a ser executada
 * - params: Array de par√¢metros para a query (opcional)
 * 
 * EXEMPLOS DE USO:
 * - executeQuery('SELECT * FROM orders') - Sem par√¢metros
 * - executeQuery('SELECT * FROM orders WHERE id = ?', [1]) - Com par√¢metro
 * - executeQuery('INSERT INTO orders (user_id, total) VALUES (?, ?)', ['user123', 25.90])
 * 
 * RETORNO:
 * - Array com resultados da query
 * - Erro se falhar na execu√ß√£o
 * 
 * SEGURAN√áA:
 * - Usa prepared statements para evitar SQL injection
 * - Par√¢metros s√£o escapados automaticamente
 */
const executeQuery = async (query, params = []) => {
  try {
    // Verificar se o pool est√° dispon√≠vel
    if (!pool) {
      throw new Error('Banco de dados n√£o conectado');
    }
    
    // Executar query usando prepared statement
    // mysql2/promise retorna [rows, fields], mas s√≥ precisamos das rows
    const [rows] = await pool.execute(query, params);
    
    return rows;
  } catch (error) {
    // Logar erro para debugging
    console.log('‚ùå Erro na query:', error.message);
    throw error;  // Re-throw para ser tratado na rota
  }
};

// ============================================================================
// üîç VERIFICA√á√ÉO DE STATUS DA CONEX√ÉO
// ============================================================================

/**
 * Fun√ß√£o para verificar se o banco de dados est√° acess√≠vel
 * 
 * FUNCIONAMENTO:
 * 1. Verifica se o pool foi criado
 * 2. Tenta obter uma conex√£o do pool
 * 3. Libera a conex√£o imediatamente
 * 4. Retorna true se conseguir conectar, false caso contr√°rio
 * 
 * USO:
 * - Health checks do servi√ßo
 * - Middleware de verifica√ß√£o antes de rotas
 * - Monitoramento de status do banco
 * 
 * RETORNO:
 * - true: Banco est√° acess√≠vel
 * - false: Banco n√£o est√° acess√≠vel
 * 
 * BENEF√çCIOS:
 * - Verifica√ß√£o r√°pida de sa√∫de
 * - N√£o mant√©m conex√µes abertas desnecessariamente
 * - Permite que o servi√ßo saiba quando o banco est√° down
 */
const checkConnection = async () => {
  try {
    // Verificar se o pool existe
    if (!pool) return false;
    
    // Tentar obter uma conex√£o do pool
    const connection = await pool.getConnection();
    
    // Liberar conex√£o imediatamente (n√£o vamos us√°-la)
    connection.release();
    
    return true;  // Se chegou at√© aqui, a conex√£o est√° funcionando
  } catch (error) {
    // Se falhar ao obter conex√£o, o banco est√° down
    return false;
  }
};

// ============================================================================
// üöÄ INICIALIZA√á√ÉO AUTOM√ÅTICA
// ============================================================================

// Criar pool de conex√µes assim que o m√≥dulo for carregado
createPool();

// ============================================================================
// üì§ EXPORTA√á√ÉO DAS FUN√á√ïES
// ============================================================================

/**
 * M√≥dulo exporta as seguintes fun√ß√µes:
 * 
 * 1. executeQuery(query, params): Executa queries SQL
 * 2. checkConnection(): Verifica status da conex√£o
 * 3. createPool(): Recria o pool se necess√°rio
 * 
 * USO NO SERVIDOR:
 * - const { executeQuery, checkConnection } = require('./database');
 * - executeQuery('SELECT * FROM orders') - Para buscar dados
 * - checkConnection() - Para verificar se o banco est√° up
 */
module.exports = {
  executeQuery,      // Fun√ß√£o principal para executar queries
  checkConnection,   // Fun√ß√£o para verificar status da conex√£o
  createPool         // Fun√ß√£o para recriar pool se necess√°rio
};

/**
 * üìö RESUMO DO M√ìDULO:
 * 
 * Este m√≥dulo de banco de dados demonstra:
 * 
 * 1. **POOL DE CONEX√ïES**: Gerenciamento eficiente de conex√µes MySQL
 * 2. **PREPARED STATEMENTS**: Seguran√ßa contra SQL injection
 * 3. **TRATAMENTO DE ERROS**: Logging e tratamento centralizado
 * 4. **VERIFICA√á√ÉO DE SA√öDE**: Health checks para monitoramento
 * 5. **INICIALIZA√á√ÉO AUTOM√ÅTICA**: Pool criado automaticamente
 * 
 * CONCEITOS APLICADOS:
 * - Connection pooling para performance
 * - Prepared statements para seguran√ßa
 * - Async/await para opera√ß√µes ass√≠ncronas
 * - Error handling centralizado
 * - Health monitoring
 * 
 * ESTRUTURA DO POOL:
 * - M√°ximo 10 conex√µes simult√¢neas
 * - Fila ilimitada de espera
 * - Conex√µes reutilizadas automaticamente
 * - Timeout autom√°tico para conex√µes ociosas
 */

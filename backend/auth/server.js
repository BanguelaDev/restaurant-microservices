/**
 * üöÄ SERVI√áO DE AUTENTICA√á√ÉO - RESTAURANTE MICROSSERVI√áOS
 * 
 * Este arquivo implementa o microsservi√ßo de autentica√ß√£o que gerencia:
 * - Login e registro de usu√°rios
 * - Verifica√ß√£o de tokens JWT do Firebase
 * - Perfis de usu√°rio
 * - Middleware de autentica√ß√£o para outros servi√ßos
 * 
 * TECNOLOGIAS UTILIZADAS:
 * - Express.js: Framework web para criar a API
 * - Firebase Admin SDK: Para autentica√ß√£o e verifica√ß√£o de usu√°rios
 * - CORS: Para permitir requisi√ß√µes do frontend
 * - dotenv: Para gerenciar vari√°veis de ambiente
 * 
 * ARQUITETURA:
 * - Servi√ßo independente que roda na porta 3001
 * - Comunica com Firebase para autentica√ß√£o
 * - Fornece middleware para outros servi√ßos verificarem tokens
 * - Resposta padronizada para todas as opera√ß√µes
 */

// Importar depend√™ncias necess√°rias
const express = require('express');           // Framework web para criar APIs
const cors = require('cors');                 // Middleware para permitir requisi√ß√µes cross-origin
const admin = require('firebase-admin');      // SDK do Firebase para autentica√ß√£o
const firebaseConfig = require('./config');   // Configura√ß√µes do Firebase

// Gerenciamento de vari√°veis de ambiente
const dotenv = require("dotenv");             // Carrega vari√°veis do arquivo .env
const path = require("path");                 // Utilit√°rio para manipular caminhos de arquivo

// Carregar vari√°veis de ambiente do arquivo .env na pasta atual
dotenv.config({ path: path.resolve(__dirname, ".env") });

// Criar inst√¢ncia do Express e definir porta
const app = express();
const PORT = process.env.PORT || 3001;       // Usa porta do ambiente ou padr√£o 3001

// ============================================================================
// üîß CONFIGURA√á√ÉO DE MIDDLEWARES
// ============================================================================

// Middleware CORS: Permite requisi√ß√µes do frontend (porta 3000)
app.use(cors());

// Middleware JSON: Converte corpo das requisi√ß√µes para objeto JavaScript
app.use(express.json());

// ============================================================================
// üî• INICIALIZA√á√ÉO DO FIREBASE ADMIN
// ============================================================================

// Tentar inicializar o Firebase Admin SDK com as credenciais
try {
  admin.initializeApp({
    credential: admin.credential.cert(firebaseConfig)  // Usar credenciais do arquivo de configura√ß√£o
  });
  console.log('‚úÖ Firebase Admin inicializado com sucesso');
} catch (error) {
  // Se falhar, logar o erro mas continuar funcionando
  console.log('‚ö†Ô∏è Firebase Admin n√£o p√¥de ser inicializado:', error.message);
  console.log('‚ö†Ô∏è O servi√ßo continuar√° funcionando, mas sem autentica√ß√£o Firebase');
}

// ============================================================================
// üîê MIDDLEWARE DE VERIFICA√á√ÉO DE TOKEN
// ============================================================================

/**
 * Middleware que verifica se o usu√°rio est√° autenticado
 * 
 * FUNCIONAMENTO:
 * 1. Extrai o token do header Authorization
 * 2. Verifica se o Firebase Admin est√° dispon√≠vel
 * 3. Valida o token com o Firebase
 * 4. Adiciona informa√ß√µes do usu√°rio ao objeto req.user
 * 
 * USO:
 * - Adicionar este middleware nas rotas que precisam de autentica√ß√£o
 * - Exemplo: app.get('/profile', verifyToken, (req, res) => { ... })
 */
const verifyToken = async (req, res, next) => {
  try {
    // Extrair token do header Authorization (formato: "Bearer TOKEN_AQUI")
    const token = req.headers.authorization?.split('Bearer ')[1];
    
    // Verificar se o token foi fornecido
    if (!token) {
      return res.status(401).json({ error: 'Token n√£o fornecido' });
    }

    // Verificar se o Firebase Admin est√° dispon√≠vel
    if (!admin.apps.length) {
      return res.status(503).json({ error: 'Servi√ßo de autentica√ß√£o indispon√≠vel' });
    }

    // Verificar o token com o Firebase
    const decodedToken = await admin.auth().verifyIdToken(token);
    
    // Adicionar informa√ß√µes do usu√°rio ao objeto da requisi√ß√£o
    req.user = decodedToken;
    
    // Continuar para o pr√≥ximo middleware/rota
    next();
  } catch (error) {
    console.log('‚ùå Erro na verifica√ß√£o do token:', error.message);
    return res.status(401).json({ error: 'Token inv√°lido' });
  }
};

// ============================================================================
// üõ£Ô∏è DEFINI√á√ÉO DAS ROTAS DA API
// ============================================================================

// Rota de health check - para monitoramento do servi√ßo
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    service: 'Auth Service',
    firebase: admin.apps.length > 0 ? 'Connected' : 'Disconnected',  // Status do Firebase
    timestamp: new Date().toISOString()                              // Timestamp atual
  });
});

// ============================================================================
// üîë ROTA DE LOGIN
// ============================================================================

/**
 * POST /login - Verificar credenciais do usu√°rio
 * 
 * FUNCIONAMENTO:
 * 1. Recebe um token ID do Firebase (gerado no frontend)
 * 2. Verifica se o token √© v√°lido
 * 3. Retorna informa√ß√µes do usu√°rio se autenticado
 * 
 * DADOS DE ENTRADA:
 * - idToken: Token JWT do Firebase (obrigat√≥rio)
 * 
 * RESPOSTA:
 * - success: true/false
 * - user: Objeto com informa√ß√µes do usu√°rio
 * - message: Mensagem de sucesso/erro
 */
app.post('/login', async (req, res) => {
  try {
    const { idToken } = req.body;  // Extrair token do corpo da requisi√ß√£o
    
    // Validar se o token foi fornecido
    if (!idToken) {
      return res.status(400).json({ error: 'Token ID n√£o fornecido' });
    }

    // Verificar se o Firebase Admin est√° dispon√≠vel
    if (!admin.apps.length) {
      return res.status(503).json({ 
        error: 'Servi√ßo de autentica√ß√£o indispon√≠vel',
        message: 'Tente novamente mais tarde'
      });
    }

    // Verificar o token com o Firebase
    const decodedToken = await admin.auth().verifyIdToken(idToken);
    
    // Retornar sucesso com informa√ß√µes do usu√°rio
    res.json({
      success: true,
      user: {
        uid: decodedToken.uid,           // ID √∫nico do usu√°rio
        email: decodedToken.email,       // Email do usu√°rio
        name: decodedToken.name || 'Usu√°rio'  // Nome ou padr√£o
      },
      message: 'Login realizado com sucesso'
    });
  } catch (error) {
    console.log('‚ùå Erro no login:', error.message);
    res.status(401).json({ 
      error: 'Falha na autentica√ß√£o',
      message: 'Verifique suas credenciais'
    });
  }
});

// ============================================================================
// üìù ROTA DE REGISTRO
// ============================================================================

/**
 * POST /register - Criar nova conta de usu√°rio
 * 
 * FUNCIONAMENTO:
 * 1. Recebe email, senha e nome do usu√°rio
 * 2. Cria nova conta no Firebase
 * 3. Retorna informa√ß√µes da conta criada
 * 
 * DADOS DE ENTRADA:
 * - email: Email do usu√°rio (obrigat√≥rio)
 * - password: Senha do usu√°rio (obrigat√≥rio)
 * - displayName: Nome de exibi√ß√£o (opcional)
 * 
 * RESPOSTA:
 * - success: true/false
 * - user: Objeto com informa√ß√µes do usu√°rio criado
 * - message: Mensagem de sucesso/erro
 */
app.post('/register', async (req, res) => {
  try {
    const { email, password, displayName } = req.body;  // Extrair dados do corpo
    
    // Validar campos obrigat√≥rios
    if (!email || !password) {
      return res.status(400).json({ error: 'Email e senha s√£o obrigat√≥rios' });
    }

    // Verificar se o Firebase Admin est√° dispon√≠vel
    if (!admin.apps.length) {
      return res.status(503).json({ 
        error: 'Servi√ßo de autentica√ß√£o indispon√≠vel',
        message: 'Tente novamente mais tarde'
      });
    }

    // Criar novo usu√°rio no Firebase
    const userRecord = await admin.auth().createUser({
      email,
      password,
      displayName: displayName || 'Usu√°rio'  // Usar nome fornecido ou padr√£o
    });

    // Retornar sucesso com informa√ß√µes do usu√°rio criado
    res.json({
      success: true,
      user: {
        uid: userRecord.uid,           // ID √∫nico do usu√°rio
        email: userRecord.email,       // Email do usu√°rio
        name: userRecord.displayName   // Nome de exibi√ß√£o
      },
      message: 'Usu√°rio criado com sucesso'
    });
  } catch (error) {
    console.log('‚ùå Erro no registro:', error.message);
    
    // Tratar erro espec√≠fico de email j√° existente
    if (error.code === 'auth/email-already-exists') {
      return res.status(409).json({ 
        error: 'Email j√° cadastrado',
        message: 'Use outro email ou fa√ßa login'
      });
    }
    
    // Erro gen√©rico
    res.status(500).json({ 
      error: 'Erro ao criar usu√°rio',
      message: 'Tente novamente mais tarde'
    });
  }
});

// ============================================================================
// üë§ ROTA DE PERFIL
// ============================================================================

/**
 * GET /profile - Obter perfil do usu√°rio autenticado
 * 
 * FUNCIONAMENTO:
 * 1. Usa o middleware verifyToken para autenticar
 * 2. Extrai informa√ß√µes do usu√°rio do token
 * 3. Retorna perfil do usu√°rio
 * 
 * AUTENTICA√á√ÉO:
 * - Requer token v√°lido no header Authorization
 * - Usa middleware verifyToken
 * 
 * RESPOSTA:
 * - success: true/false
 * - user: Objeto com informa√ß√µes do usu√°rio
 */
app.get('/profile', verifyToken, (req, res) => {
  try {
    // req.user √© preenchido pelo middleware verifyToken
    res.json({
      success: true,
      user: {
        uid: req.user.uid,
        email: req.user.email,
        name: req.user.name || req.user.display_name || 'Usu√°rio'  // Fallback para diferentes campos
      }
    });
  } catch (error) {
    console.log('‚ùå Erro ao obter perfil:', error.message);
    res.status(500).json({ 
      error: 'Erro ao obter perfil',
      message: 'Tente novamente mais tarde'
    });
  }
});

// ============================================================================
// üö® TRATAMENTO DE ERROS GLOBAL
// ============================================================================

/**
 * Middleware de tratamento de erros n√£o capturados
 * 
 * FUNCIONAMENTO:
 * - Captura erros que n√£o foram tratados nas rotas
 * - Loga o erro para debugging
 * - Retorna resposta padronizada de erro
 */
app.use((error, req, res, next) => {
  console.log('‚ùå Erro n√£o tratado:', error);
  res.status(500).json({ 
    error: 'Erro interno do servidor',
    message: 'Algo deu errado'
  });
});

// ============================================================================
// ‚ùå ROTA 404 - P√ÅGINA N√ÉO ENCONTRADA
// ============================================================================

/**
 * Middleware para rotas n√£o encontradas
 * 
 * FUNCIONAMENTO:
 * - Captura todas as requisi√ß√µes que n√£o correspondem a rotas definidas
 * - Retorna erro 404 padronizado
 */
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Rota n√£o encontrada' });
});

// ============================================================================
// üöÄ INICIALIZA√á√ÉO DO SERVIDOR
// ============================================================================

// Iniciar o servidor na porta definida
app.listen(PORT, () => {
  console.log(`üöÄ Servi√ßo de Autentica√ß√£o rodando na porta ${PORT}`);
  console.log(`üì° Endpoint: http://localhost:${PORT}`);
  console.log(`üîí Firebase: ${admin.apps.length > 0 ? 'Conectado' : 'Desconectado'}`);
});

/**
 * üìö RESUMO DO SERVI√áO:
 * 
 * Este microsservi√ßo de autentica√ß√£o demonstra:
 * 
 * 1. **INDEPEND√äNCIA**: Funciona mesmo se outros servi√ßos falharem
 * 2. **RESILI√äNCIA**: Continua funcionando mesmo se o Firebase falhar
 * 3. **MIDDLEWARE REUTILIZ√ÅVEL**: verifyToken pode ser usado por outros servi√ßos
 * 4. **TRATAMENTO DE ERROS**: Respostas padronizadas e logging detalhado
 * 5. **VALIDA√á√ÉO**: Verifica dados de entrada em todas as rotas
 * 6. **MONITORAMENTO**: Endpoint de health check para verificar status
 * 
 * CONCEITOS DE MICROSSERVI√áOS APLICADOS:
 * - Separa√ß√£o de responsabilidades (s√≥ autentica√ß√£o)
 * - Comunica√ß√£o via APIs REST
 * - Banco de dados especializado (Firebase para auth)
 * - Deploy independente
 * - Escalabilidade horizontal
 */

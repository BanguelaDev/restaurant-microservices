/**
 * üóÑÔ∏è CONEX√ÉO COM BANCO DE DADOS MONGODB - SERVI√áO DE FEEDBACK
 * 
 * Este arquivo gerencia toda a comunica√ß√£o com o banco de dados MongoDB:
 * - Cria√ß√£o e gerenciamento da conex√£o com MongoDB
 * - Execu√ß√£o de opera√ß√µes no banco
 * - Verifica√ß√£o de status da conex√£o
 * - Tratamento de erros de banco
 * - Encerramento gracioso da conex√£o
 * 
 * TECNOLOGIAS UTILIZADAS:
 * - mongodb: Driver oficial do MongoDB para Node.js
 * - MongoClient: Cliente para conectar ao servidor MongoDB
 * - Configura√ß√£o via arquivo config.js
 * 
 * ARQUITETURA:
 * - Conex√£o √∫nica com MongoDB
 * - Reutiliza√ß√£o da mesma conex√£o para todas as opera√ß√µes
 * - Verifica√ß√£o de sa√∫de da conex√£o
 * - Tratamento de erros centralizado
 * - Encerramento autom√°tico ao finalizar o processo
 * 
 * VANTAGENS DO MONGODB:
 * - Schema flex√≠vel (campos opcionais)
 * - Documentos JSON nativos
 * - Agrega√ß√µes poderosas
 * - Escalabilidade horizontal
 * - √çndices para performance
 */

// Importar depend√™ncias
const { MongoClient } = require('mongodb');   // Driver oficial do MongoDB
const config = require('./config');           // Configura√ß√µes do banco (URL, database, collection)

// Vari√°veis globais para armazenar conex√£o e refer√™ncias
let client = null;        // Cliente MongoDB
let db = null;            // Refer√™ncia para o banco de dados
let collection = null;     // Refer√™ncia para a cole√ß√£o

// ============================================================================
// üîå CONEX√ÉO COM MONGODB
// ============================================================================

/**
 * Fun√ß√£o para conectar ao servidor MongoDB
 * 
 * FUNCIONAMENTO:
 * 1. Cria novo cliente MongoDB usando configura√ß√µes do config.js
 * 2. Estabelece conex√£o com o servidor
 * 3. Seleciona banco de dados espec√≠fico
 * 4. Obt√©m refer√™ncia para a cole√ß√£o de feedback
 * 5. Loga sucesso ou erro da conex√£o
 * 
 * CONFIGURA√á√ïES:
 * - url: Endere√ßo do servidor MongoDB (ex: mongodb://localhost:27017)
 * - database: Nome do banco de dados (ex: restaurant_feedback)
 * - collection: Nome da cole√ß√£o (ex: feedback)
 * 
 * RETORNO:
 * - true: Conex√£o estabelecida com sucesso
 * - false: Falha na conex√£o
 * 
 * BENEF√çCIOS:
 * - Conex√£o √∫nica reutilizada
 * - Refer√™ncias persistentes para db e collection
 * - Tratamento de erros centralizado
 * - Logs informativos para debugging
 */
const connect = async () => {
  try {
    // Criar novo cliente MongoDB
    client = new MongoClient(config.url);
    
    // Estabelecer conex√£o com o servidor
    await client.connect();
    
    // Selecionar banco de dados espec√≠fico
    db = client.db(config.database);
    
    // Obter refer√™ncia para a cole√ß√£o
    collection = db.collection(config.collection);
    
    console.log('‚úÖ MongoDB conectado com sucesso');
    return true;
  } catch (error) {
    // Logar erro mas n√£o parar o servi√ßo
    console.log('‚ùå Erro ao conectar com MongoDB:', error.message);
    return false;
  }
};

// ============================================================================
// üîç VERIFICA√á√ÉO DE CONEX√ÉO
// ============================================================================

/**
 * Fun√ß√£o para verificar se o banco de dados MongoDB est√° acess√≠vel
 * 
 * FUNCIONAMENTO:
 * 1. Verifica se o cliente foi criado
 * 2. Executa comando ping no banco admin
 * 3. Retorna true se conseguir executar o comando
 * 4. Retorna false se falhar na execu√ß√£o
 * 
 * USO:
 * - Health checks do servi√ßo
 * - Middleware de verifica√ß√£o antes de rotas
 * - Monitoramento de status do banco
 * 
 * RETORNO:
 * - true: MongoDB est√° acess√≠vel
 * - false: MongoDB n√£o est√° acess√≠vel
 * 
 * BENEF√çCIOS:
 * - Verifica√ß√£o r√°pida de sa√∫de
 * - Comando leve (ping)
 * - N√£o consome recursos significativos
 * - Permite que o servi√ßo saiba quando o banco est√° down
 * 
 * NOTA:
 * - Usa banco 'admin' para o comando ping
 * - Ping √© um comando interno do MongoDB
 * - Resposta r√°pida e confi√°vel
 */
const checkConnection = async () => {
  try {
    // Verificar se o cliente existe
    if (!client) return false;
    
    // Executar comando ping no banco admin
    // Se falhar, significa que o MongoDB est√° down
    await client.db('admin').command({ ping: 1 });
    
    return true;  // Se chegou at√© aqui, a conex√£o est√° funcionando
  } catch (error) {
    // Se falhar ao executar ping, o MongoDB est√° down
    return false;
  }
};

// ============================================================================
// üöÄ EXECU√á√ÉO DE OPERA√á√ïES
// ============================================================================

/**
 * Fun√ß√£o para executar opera√ß√µes no banco de dados MongoDB
 * 
 * FUNCIONAMENTO:
 * 1. Verifica se a cole√ß√£o est√° dispon√≠vel
 * 2. Executa a opera√ß√£o fornecida como callback
 * 3. Retorna o resultado da opera√ß√£o
 * 4. Trata erros e loga para debugging
 * 
 * PAR√ÇMETROS:
 * - operation: Fun√ß√£o callback que recebe a cole√ß√£o e executa a opera√ß√£o
 * 
 * EXEMPLOS DE USO:
 * - executeOperation(async (collection) => collection.find().toArray())
 * - executeOperation(async (collection) => collection.insertOne(doc))
 * - executeOperation(async (collection) => collection.deleteOne(filter))
 * 
 * RETORNO:
 * - Resultado da opera√ß√£o executada
 * - Erro se falhar na execu√ß√£o
 * 
 * BENEF√çCIOS:
 * - Interface consistente para todas as opera√ß√µes
 * - Verifica√ß√£o autom√°tica de conex√£o
 * - Tratamento de erros centralizado
 * - Logging para debugging
 * 
 * SEGURAN√áA:
 * - Verifica se a cole√ß√£o est√° dispon√≠vel
 * - Trata erros de conex√£o
 * - N√£o exp√µe detalhes internos do banco
 */
const executeOperation = async (operation) => {
  try {
    // Verificar se a cole√ß√£o est√° dispon√≠vel
    if (!collection) {
      throw new Error('Banco de dados n√£o conectado');
    }
    
    // Executar opera√ß√£o fornecida
    // A opera√ß√£o recebe a cole√ß√£o como par√¢metro
    return await operation(collection);
  } catch (error) {
    // Logar erro para debugging
    console.log('‚ùå Erro na opera√ß√£o:', error.message);
    throw error;  // Re-throw para ser tratado na rota
  }
};

// ============================================================================
// üîå FECHAMENTO DE CONEX√ÉO
// ============================================================================

/**
 * Fun√ß√£o para fechar a conex√£o com MongoDB de forma graciosa
 * 
 * FUNCIONAMENTO:
 * 1. Verifica se o cliente existe
 * 2. Fecha a conex√£o com o servidor
 * 3. Loga sucesso ou erro do fechamento
 * 
 * USO:
 * - Encerramento gracioso do servi√ßo
 * - Limpeza de recursos
 * - Evita conex√µes √≥rf√£s
 * 
 * BENEF√çCIOS:
 * - Fechamento limpo da conex√£o
 * - Libera√ß√£o de recursos do sistema
 * - Logs informativos para debugging
 * - Tratamento de erros no fechamento
 * 
 * NOTA:
 * - Deve ser chamada quando o servi√ßo for encerrado
 * - Evita vazamentos de mem√≥ria
 * - Boa pr√°tica para aplica√ß√µes Node.js
 */
const closeConnection = async () => {
  try {
    // Verificar se o cliente existe
    if (client) {
      // Fechar conex√£o com o servidor
      await client.close();
      console.log('üîå Conex√£o MongoDB fechada');
    }
  } catch (error) {
    // Logar erro mas n√£o falhar no fechamento
    console.log('‚ùå Erro ao fechar conex√£o:', error.message);
  }
};

// ============================================================================
// üöÄ INICIALIZA√á√ÉO AUTOM√ÅTICA
// ============================================================================

// Conectar ao MongoDB assim que o m√≥dulo for carregado
connect();

// ============================================================================
// üõë TRATAMENTO DE ENCERRAMENTO GRACIOSO
// ============================================================================

/**
 * Event listeners para encerramento gracioso do processo
 * 
 * FUNCIONAMENTO:
 * - Captura sinais de encerramento do sistema
 * - Chama closeConnection() para fechar conex√£o limpa
 * - Evita conex√µes √≥rf√£s e vazamentos de mem√≥ria
 * 
 * SINAIS CAPTURADOS:
 * - SIGINT: Interrup√ß√£o do terminal (Ctrl+C)
 * - SIGTERM: Termina√ß√£o do processo
 * 
 * BENEF√çCIOS:
 * - Encerramento limpo do servi√ßo
 * - Libera√ß√£o autom√°tica de recursos
 * - Boas pr√°ticas para aplica√ß√µes Node.js
 * - Evita problemas em ambientes de produ√ß√£o
 * 
 * NOTA:
 * - SIGINT √© comum em desenvolvimento (Ctrl+C)
 * - SIGTERM √© comum em produ√ß√£o (docker stop, systemctl stop)
 * - Ambos os sinais s√£o tratados da mesma forma
 */
process.on('SIGINT', closeConnection);   // Capturar Ctrl+C
process.on('SIGTERM', closeConnection);  // Capturar sinal de termina√ß√£o

// ============================================================================
// üì§ EXPORTA√á√ÉO DAS FUN√á√ïES
// ============================================================================

/**
 * M√≥dulo exporta as seguintes fun√ß√µes:
 * 
 * 1. executeOperation(operation): Executa opera√ß√µes no MongoDB
 * 2. checkConnection(): Verifica status da conex√£o
 * 3. connect(): Reconecta ao MongoDB se necess√°rio
 * 4. closeConnection(): Fecha conex√£o graciosamente
 * 
 * USO NO SERVIDOR:
 * - const { executeOperation, checkConnection } = require('./database');
 * - executeOperation(async (collection) => collection.find().toArray()) - Para buscar dados
 * - checkConnection() - Para verificar se o banco est√° up
 * - closeConnection() - Para fechar conex√£o ao encerrar
 */
module.exports = {
  executeOperation,    // Fun√ß√£o principal para executar opera√ß√µes
  checkConnection,     // Fun√ß√£o para verificar status da conex√£o
  connect,             // Fun√ß√£o para reconectar se necess√°rio
  closeConnection      // Fun√ß√£o para fechar conex√£o graciosamente
};

/**
 * üìö RESUMO DO M√ìDULO:
 * 
 * Este m√≥dulo de banco de dados demonstra:
 * 
 * 1. **CONEX√ÉO √öNICA**: Uma conex√£o reutilizada para todas as opera√ß√µes
 * 2. **OPERATIONS HELPER**: Interface consistente para opera√ß√µes MongoDB
 * 3. **HEALTH CHECKS**: Verifica√ß√£o de sa√∫de da conex√£o
 * 4. **GRACEFUL SHUTDOWN**: Encerramento limpo da conex√£o
 * 5. **ERROR HANDLING**: Tratamento centralizado de erros
 * 
 * CONCEITOS APLICADOS:
 * - Connection pooling (conceito similar)
 * - Async/await para opera√ß√µes ass√≠ncronas
 * - Event-driven programming (process.on)
 * - Error handling centralizado
 * - Health monitoring
 * 
 * ESTRUTURA DA CONEX√ÉO:
 * - Cliente √∫nico para todo o servi√ßo
 * - Refer√™ncias persistentes para db e collection
 * - Verifica√ß√£o autom√°tica de sa√∫de
 * - Encerramento autom√°tico ao finalizar
 * 
 * VANTAGENS DO MONGODB:
 * - Schema flex√≠vel para feedbacks
 * - Agrega√ß√µes nativas para estat√≠sticas
 * - Documentos JSON para f√°cil manipula√ß√£o
 * - Escalabilidade horizontal autom√°tica
 * - √çndices para consultas r√°pidas
 */
